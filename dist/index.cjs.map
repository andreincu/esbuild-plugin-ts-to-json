{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Plugin, PluginBuild } from \"esbuild\";\nimport { mkdir, readFile, stat, writeFile } from \"fs/promises\";\nimport path from \"path\";\nimport {\n  ModuleKind,\n  ModuleResolutionKind,\n  ScriptTarget,\n  transpileModule,\n  TranspileOptions,\n} from \"typescript\";\n\nconst transpilerConfig: TranspileOptions = {\n  compilerOptions: {\n    module: ModuleKind.ESNext,\n    moduleResolution: ModuleResolutionKind.Bundler,\n    target: ScriptTarget.ES2017,\n  },\n};\n\n// Helper function to ensure directory existence and write file\nconst writeJsonFile = async (filePath: string, content: string) => {\n  const dir = path.dirname(filePath);\n  await mkdir(dir, { recursive: true });\n  await writeFile(filePath, content);\n};\n\n/**\n * Esbuild plugin to convert TypeScript to JSON format.\n *\n * @requires\n * - `entryPoints` (array of strings) is required.\n * - `write` set to false.\n * - `bundle` set to false.\n * - `outdir` is by default `./build`.\n */\nexport function esbuildTsToJson(): Plugin {\n  return {\n    name: \"esbuild-plugin-ts-to-json\",\n    setup(build: PluginBuild) {\n      build.onEnd(async () => {\n        const { outdir = \"./build\", entryPoints } = build.initialOptions;\n\n        if (!Array.isArray(entryPoints)) {\n          throw new Error(`entryPoints must be an array of strings.`);\n        }\n\n        for (const input of entryPoints) {\n          if (typeof input !== \"string\") {\n            throw new Error(`Invalid entry point format: ${input}`);\n          }\n\n          // Read the TypeScript file\n          const inputFilePath = path.resolve(input);\n          const outputFileName = path.parse(input).name + \".json\";\n          const outputFilePath = path.resolve(outdir, outputFileName);\n\n          try {\n            // Check if the input file exists and is readable\n            await stat(inputFilePath); //throw error if doesn't exists\n\n            // Read the TypeScript file\n            const source = await readFile(inputFilePath, \"utf8\");\n\n            // Transpile TypeScript to JavaScript\n            const { outputText } = transpileModule(source, transpilerConfig);\n\n            // Create a new file in memory that can be imported as a module\n            const moduleURI = `data:text/javascript,${encodeURIComponent(\n              outputText\n            )}`;\n\n            // Dynamically import the transpiled module\n            const { default: exportedData = {} } = await import(moduleURI);\n\n            // Serialize the default export to JSON\n            const jsonContent = JSON.stringify(exportedData, null, 2);\n\n            // Write JSON file to disk\n            await writeJsonFile(outputFilePath, jsonContent);\n          } catch (error) {\n            console.error(`Failed to process ${inputFilePath}:`, error);\n          }\n        }\n      });\n    },\n  };\n}\n"],"mappings":"0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,qBAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAAiD,uBACjDC,EAAiB,qBACjBC,EAMO,sBAEDC,EAAqC,CACzC,gBAAiB,CACf,OAAQ,aAAW,OACnB,iBAAkB,uBAAqB,QACvC,OAAQ,eAAa,MACvB,CACF,EAGMC,EAAgB,MAAOC,EAAkBC,IAAoB,CACjE,IAAMC,EAAM,EAAAC,QAAK,QAAQH,CAAQ,EACjC,QAAM,SAAME,EAAK,CAAE,UAAW,EAAK,CAAC,EACpC,QAAM,aAAUF,EAAUC,CAAO,CACnC,EAWO,SAASR,GAA0B,CACxC,MAAO,CACL,KAAM,4BACN,MAAMW,EAAoB,CACxBA,EAAM,MAAM,SAAY,CACtB,GAAM,CAAE,OAAAC,EAAS,UAAW,YAAAC,CAAY,EAAIF,EAAM,eAElD,GAAI,CAAC,MAAM,QAAQE,CAAW,EAC5B,MAAM,IAAI,MAAM,0CAA0C,EAG5D,QAAWC,KAASD,EAAa,CAC/B,GAAI,OAAOC,GAAU,SACnB,MAAM,IAAI,MAAM,+BAA+BA,CAAK,EAAE,EAIxD,IAAMC,EAAgB,EAAAL,QAAK,QAAQI,CAAK,EAClCE,EAAiB,EAAAN,QAAK,MAAMI,CAAK,EAAE,KAAO,QAC1CG,EAAiB,EAAAP,QAAK,QAAQE,EAAQI,CAAc,EAE1D,GAAI,CAEF,QAAM,QAAKD,CAAa,EAGxB,IAAMG,EAAS,QAAM,YAASH,EAAe,MAAM,EAG7C,CAAE,WAAAI,CAAW,KAAI,mBAAgBD,EAAQb,CAAgB,EAGzDe,EAAY,wBAAwB,mBACxCD,CACF,CAAC,GAGK,CAAE,QAASE,EAAe,CAAC,CAAE,EAAI,MAAM,OAAOD,GAG9CE,EAAc,KAAK,UAAUD,EAAc,KAAM,CAAC,EAGxD,MAAMf,EAAcW,EAAgBK,CAAW,CACjD,OAASC,EAAO,CACd,QAAQ,MAAM,qBAAqBR,CAAa,IAAKQ,CAAK,CAC5D,CACF,CACF,CAAC,CACH,CACF,CACF","names":["src_exports","__export","esbuildTsToJson","__toCommonJS","import_promises","import_path","import_typescript","transpilerConfig","writeJsonFile","filePath","content","dir","path","build","outdir","entryPoints","input","inputFilePath","outputFileName","outputFilePath","source","outputText","moduleURI","exportedData","jsonContent","error"]}