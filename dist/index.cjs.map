{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Plugin, PluginBuild } from \"esbuild\";\nimport { mkdir, readFile, stat, writeFile } from \"fs/promises\";\nimport path from \"path\";\nimport {\n  ModuleKind,\n  ModuleResolutionKind,\n  ScriptTarget,\n  transpileModule,\n  TranspileOptions,\n} from \"typescript\";\nimport { pathToFileURL } from \"url\";\n\nconst transpilerConfig: TranspileOptions = {\n  compilerOptions: {\n    module: ModuleKind.ESNext,\n    moduleResolution: ModuleResolutionKind.Bundler,\n    target: ScriptTarget.ES2017,\n  },\n};\n\n/**\n * Esbuild plugin to convert TypeScript to JSON format.\n *\n * @requires\n * - `entryPoints` (array of strings) is required.\n * - `write` set to false.\n * - `bundle` set to false.\n * - `outdir` is by default `./build`.\n */\nexport function esbuildTsToJson(): Plugin {\n  return {\n    name: \"esbuild-plugin-ts-to-json\",\n    setup(build: PluginBuild) {\n      build.onEnd(async () => {\n        const { outdir = \"./build\", entryPoints } = build.initialOptions;\n\n        if (!Array.isArray(entryPoints)) {\n          throw new Error(`entryPoints must be an array of strings.`);\n        }\n\n        // TODO: implement lowest common ancestor\n        for (const input of entryPoints) {\n          if (typeof input !== \"string\") {\n            throw new Error(`Invalid entry point format: ${input}`);\n          }\n\n          // Read the TypeScript file\n          const inputFilePath = path.resolve(input);\n          const outputFileName = path.parse(input).name + \".json\";\n          const outputFilePath = path.resolve(outdir, outputFileName);\n\n          try {\n            // Check if the input file exists and is readable\n            await stat(inputFilePath); //throw error if doesn't exists\n\n            // Read the TypeScript file\n            const source = await readFile(inputFilePath, \"utf8\");\n\n            // Transpile TypeScript to JavaScript\n            const { outputText } = transpileModule(source, transpilerConfig);\n\n            // Write transpiled output to a temporary file\n            const tempOutputFilePath = inputFilePath + \".js\";\n            await writeFile(tempOutputFilePath, outputText);\n\n            // Dynamically import and execute the transpiled file\n            const transpiledModule = await import(\n              pathToFileURL(tempOutputFilePath).toString()\n            );\n\n            // Get the default export, which should be the resolved config\n            const exportedData = transpiledModule.default;\n\n            // Serialize the default export to JSON\n            const jsonContent = JSON.stringify(exportedData, null, 2);\n\n            // Write JSON file to disk\n            await writeJsonFile(outputFilePath, jsonContent);\n          } catch (error) {\n            console.error(`Failed to process ${inputFilePath}:`, error);\n          }\n        }\n      });\n    },\n  };\n}\n\n// Helper function to ensure directory existence and write file\nasync function writeJsonFile(filePath: string, content: string) {\n  const dir = path.dirname(filePath);\n  await mkdir(dir, { recursive: true });\n  await writeFile(filePath, content);\n}\n"],"mappings":"0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,qBAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAAiD,uBACjDC,EAAiB,qBACjBC,EAMO,sBACPC,EAA8B,eAExBC,EAAqC,CACzC,gBAAiB,CACf,OAAQ,aAAW,OACnB,iBAAkB,uBAAqB,QACvC,OAAQ,eAAa,MACvB,CACF,EAWO,SAASN,GAA0B,CACxC,MAAO,CACL,KAAM,4BACN,MAAMO,EAAoB,CACxBA,EAAM,MAAM,SAAY,CACtB,GAAM,CAAE,OAAAC,EAAS,UAAW,YAAAC,CAAY,EAAIF,EAAM,eAElD,GAAI,CAAC,MAAM,QAAQE,CAAW,EAC5B,MAAM,IAAI,MAAM,0CAA0C,EAI5D,QAAWC,KAASD,EAAa,CAC/B,GAAI,OAAOC,GAAU,SACnB,MAAM,IAAI,MAAM,+BAA+BA,CAAK,EAAE,EAIxD,IAAMC,EAAgB,EAAAC,QAAK,QAAQF,CAAK,EAClCG,EAAiB,EAAAD,QAAK,MAAMF,CAAK,EAAE,KAAO,QAC1CI,EAAiB,EAAAF,QAAK,QAAQJ,EAAQK,CAAc,EAE1D,GAAI,CAEF,QAAM,QAAKF,CAAa,EAGxB,IAAMI,EAAS,QAAM,YAASJ,EAAe,MAAM,EAG7C,CAAE,WAAAK,CAAW,KAAI,mBAAgBD,EAAQT,CAAgB,EAGzDW,EAAqBN,EAAgB,MAC3C,QAAM,aAAUM,EAAoBD,CAAU,EAQ9C,IAAME,GALmB,MAAM,UAC7B,iBAAcD,CAAkB,EAAE,SAAS,IAIP,QAGhCE,EAAc,KAAK,UAAUD,EAAc,KAAM,CAAC,EAGxD,MAAME,EAAcN,EAAgBK,CAAW,CACjD,OAASE,EAAO,CACd,QAAQ,MAAM,qBAAqBV,CAAa,IAAKU,CAAK,CAC5D,CACF,CACF,CAAC,CACH,CACF,CACF,CAGA,eAAeD,EAAcE,EAAkBC,EAAiB,CAC9D,IAAMC,EAAM,EAAAZ,QAAK,QAAQU,CAAQ,EACjC,QAAM,SAAME,EAAK,CAAE,UAAW,EAAK,CAAC,EACpC,QAAM,aAAUF,EAAUC,CAAO,CACnC","names":["src_exports","__export","esbuildTsToJson","__toCommonJS","import_promises","import_path","import_typescript","import_url","transpilerConfig","build","outdir","entryPoints","input","inputFilePath","path","outputFileName","outputFilePath","source","outputText","tempOutputFilePath","exportedData","jsonContent","writeJsonFile","error","filePath","content","dir"]}