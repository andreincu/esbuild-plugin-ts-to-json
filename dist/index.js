import{mkdir as w,readFile as g,stat as y,unlink as F,writeFile as l}from"fs/promises";import r from"path";import{ModuleKind as P,ModuleResolutionKind as h,ScriptTarget as T,transpileModule as O}from"typescript";import{pathToFileURL as E}from"url";var S={compilerOptions:{module:P.ESNext,moduleResolution:h.Bundler,target:T.ES2017}};function J(){return{name:"esbuild-plugin-ts-to-json",setup(t){t.onEnd(async()=>{let{outdir:e="./build",entryPoints:o}=t.initialOptions;if(!Array.isArray(o))throw new Error("entryPoints must be an array of strings.");for(let i of o){if(typeof i!="string")throw new Error(`Invalid entry point format: ${i}`);let n=r.resolve(i),u=r.parse(i).name+".json",p=r.resolve(e,u),s=`${n}-${Date.now()}.js`;try{await y(n);let a=await g(n,"utf8"),{outputText:c}=O(a,S);await l(s,c);let d=E(s).toString(),{default:m={}}=await import(d),f=JSON.stringify(m,null,2);await j(p,f)}catch(a){console.error(`Failed to process ${n}:`,a)}finally{await F(s)}}})}}}async function j(t,e){let o=r.dirname(t);await w(o,{recursive:!0}),await l(t,e)}export{J as esbuildTsToJson};
//# sourceMappingURL=index.js.map