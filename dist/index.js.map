{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Plugin, PluginBuild } from \"esbuild\";\nimport { mkdir, readFile, stat, writeFile } from \"fs/promises\";\nimport path from \"path\";\nimport {\n  ModuleKind,\n  ModuleResolutionKind,\n  ScriptTarget,\n  transpileModule,\n  TranspileOptions,\n} from \"typescript\";\nimport { pathToFileURL } from \"url\";\n\nconst transpilerConfig: TranspileOptions = {\n  compilerOptions: {\n    module: ModuleKind.ESNext,\n    moduleResolution: ModuleResolutionKind.Bundler,\n    target: ScriptTarget.ES2017,\n  },\n};\n\n/**\n * Esbuild plugin to convert TypeScript to JSON format.\n *\n * @requires\n * - `entryPoints` (array of strings) is required.\n * - `write` set to false.\n * - `bundle` set to false.\n * - `outdir` is by default `./build`.\n */\nexport function esbuildTsToJson(): Plugin {\n  return {\n    name: \"esbuild-plugin-ts-to-json\",\n    setup(build: PluginBuild) {\n      build.onEnd(async () => {\n        const { outdir = \"./build\", entryPoints } = build.initialOptions;\n\n        if (!Array.isArray(entryPoints)) {\n          throw new Error(`entryPoints must be an array of strings.`);\n        }\n\n        // TODO: implement lowest common ancestor\n        for (const input of entryPoints) {\n          if (typeof input !== \"string\") {\n            throw new Error(`Invalid entry point format: ${input}`);\n          }\n\n          // Read the TypeScript file\n          const inputFilePath = path.resolve(input);\n          const outputFileName = path.parse(input).name + \".json\";\n          const outputFilePath = path.resolve(outdir, outputFileName);\n\n          try {\n            // Check if the input file exists and is readable\n            await stat(inputFilePath); //throw error if doesn't exists\n\n            // Read the TypeScript file\n            const source = await readFile(inputFilePath, \"utf8\");\n\n            // Transpile TypeScript to JavaScript\n            const { outputText } = transpileModule(source, transpilerConfig);\n\n            // Write transpiled output to a temporary file\n            const tempOutputFilePath = inputFilePath + \".js\";\n            await writeFile(tempOutputFilePath, outputText);\n\n            // Dynamically import and execute the transpiled file\n            const transpiledModule = await import(\n              pathToFileURL(tempOutputFilePath).toString()\n            );\n\n            // Get the default export, which should be the resolved config\n            const exportedData = transpiledModule.default;\n\n            // Serialize the default export to JSON\n            const jsonContent = JSON.stringify(exportedData, null, 2);\n\n            // Write JSON file to disk\n            await writeJsonFile(outputFilePath, jsonContent);\n          } catch (error) {\n            console.error(`Failed to process ${inputFilePath}:`, error);\n          }\n        }\n      });\n    },\n  };\n}\n\n// Helper function to ensure directory existence and write file\nasync function writeJsonFile(filePath: string, content: string) {\n  const dir = path.dirname(filePath);\n  await mkdir(dir, { recursive: true });\n  await writeFile(filePath, content);\n}\n"],"mappings":"AACA,OAAS,SAAAA,EAAO,YAAAC,EAAU,QAAAC,EAAM,aAAAC,MAAiB,cACjD,OAAOC,MAAU,OACjB,OACE,cAAAC,EACA,wBAAAC,EACA,gBAAAC,EACA,mBAAAC,MAEK,aACP,OAAS,iBAAAC,MAAqB,MAE9B,IAAMC,EAAqC,CACzC,gBAAiB,CACf,OAAQL,EAAW,OACnB,iBAAkBC,EAAqB,QACvC,OAAQC,EAAa,MACvB,CACF,EAWO,SAASI,GAA0B,CACxC,MAAO,CACL,KAAM,4BACN,MAAMC,EAAoB,CACxBA,EAAM,MAAM,SAAY,CACtB,GAAM,CAAE,OAAAC,EAAS,UAAW,YAAAC,CAAY,EAAIF,EAAM,eAElD,GAAI,CAAC,MAAM,QAAQE,CAAW,EAC5B,MAAM,IAAI,MAAM,0CAA0C,EAI5D,QAAWC,KAASD,EAAa,CAC/B,GAAI,OAAOC,GAAU,SACnB,MAAM,IAAI,MAAM,+BAA+BA,CAAK,EAAE,EAIxD,IAAMC,EAAgBZ,EAAK,QAAQW,CAAK,EAClCE,EAAiBb,EAAK,MAAMW,CAAK,EAAE,KAAO,QAC1CG,EAAiBd,EAAK,QAAQS,EAAQI,CAAc,EAE1D,GAAI,CAEF,MAAMf,EAAKc,CAAa,EAGxB,IAAMG,EAAS,MAAMlB,EAASe,EAAe,MAAM,EAG7C,CAAE,WAAAI,CAAW,EAAIZ,EAAgBW,EAAQT,CAAgB,EAGzDW,EAAqBL,EAAgB,MAC3C,MAAMb,EAAUkB,EAAoBD,CAAU,EAQ9C,IAAME,GALmB,MAAM,OAC7Bb,EAAcY,CAAkB,EAAE,SAAS,IAIP,QAGhCE,EAAc,KAAK,UAAUD,EAAc,KAAM,CAAC,EAGxD,MAAME,EAAcN,EAAgBK,CAAW,CACjD,OAASE,EAAO,CACd,QAAQ,MAAM,qBAAqBT,CAAa,IAAKS,CAAK,CAC5D,CACF,CACF,CAAC,CACH,CACF,CACF,CAGA,eAAeD,EAAcE,EAAkBC,EAAiB,CAC9D,IAAMC,EAAMxB,EAAK,QAAQsB,CAAQ,EACjC,MAAM1B,EAAM4B,EAAK,CAAE,UAAW,EAAK,CAAC,EACpC,MAAMzB,EAAUuB,EAAUC,CAAO,CACnC","names":["mkdir","readFile","stat","writeFile","path","ModuleKind","ModuleResolutionKind","ScriptTarget","transpileModule","pathToFileURL","transpilerConfig","esbuildTsToJson","build","outdir","entryPoints","input","inputFilePath","outputFileName","outputFilePath","source","outputText","tempOutputFilePath","exportedData","jsonContent","writeJsonFile","error","filePath","content","dir"]}